---
import { Icon } from 'astro-icon';

interface Item {
  title: string;
  description: string;
  icon?: string;
}

export interface Props {
  title?: string;
  subtitle?: string;
  highlight?: string;
  items: Array<Item>;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  highlight,
  items = [],
} = Astro.props;
---

<section class="scroll-mt-16" id="caracteristicas">
  <div class="py-24 sm:py-32">
    <div class="mx-auto max-w-6xl px-4 sm:px-6">
      {
        (title || subtitle || highlight) && (
          <div class="mb-10 md:mx-auto text-center md:mb-12 max-w-3xl">
            {highlight && (
              <p
                class="text-base text-secondary dark:text-secondary font-semibold tracking-wide uppercase"
                set:html={highlight}
              />
            )}
            {title && (
              <h2
                class="text-4xl md:text-5xl font-bold text-third leading-tighter mb-4 font-heading dark:text-white"
                set:html={title}
              />
            )}

            {subtitle && (
              <p class="max-w-3xl mx-auto sm:text-center text-lg text-muted dark:text-slate-400" set:html={subtitle} />
            )}
          </div>
        )
      }
    </div>

    <div class="mx-auto max-w-7xl px-6 lg:px-8">
      <div class="mx-auto mt-16 max-w-2xl sm:mt-20 lg:mt-24 lg:max-w-none">
        <dl class="grid max-w-xl grid-cols-1 gap-x-8 gap-y-16 lg:max-w-none lg:grid-cols-3">
          {
            items.map(({ title, description, icon }) => (
              <div class="flex flex-col opacity-0 entrada-animations">
                <dt class="flex items-center gap-x-3 text-xl text-third font-bold leading-7 dark:text-white">
                  {icon && <Icon name={icon} class="w-6 h-6 flex-none text-secondary dark:text-secondary" />}
                  {title}
                </dt>
                <dd class="mt-4 flex flex-auto flex-col leading-7 text-muted dark:text-slate-400">
                  <p class="flex-auto text-base">{description}</p>
                </dd>
              </div>
            ))
          }
        </dl>
      </div>
    </div>
  </div>
</section>

<script>
  const elements = document.querySelectorAll('.entrada-animations');

  elements.forEach((element) => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.remove('invisible');

          const delay = Math.floor(Math.random() * 1000);

          entry.target.style.animationDelay = `${delay}ms`;

          entry.target.classList.add('animate-fade-slide-in');

          observer.unobserve(entry.target);
        }
      });
    });

    observer.observe(element);
  });
</script>
